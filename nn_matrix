import random
import numpy as np

class Neural_Network:

    def __init__(self, input = 2, hidden = 3, output = 1):

        #Weights (parameters)
        self.W1 = np.random.uniform(0.0, 1.0, (input, hidden))
        self.W2 = np.random.uniform(0.0, 1.0, (hidden, output))

        self.B1 = np.random.uniform(0.0, 1.0, (1, hidden))
        self.B2 = np.random.uniform(0.0, 1.0, (1, output))
    
    def sigmoid(self, z):
        #Apply sigmoid activation function to scalar, vector, or matrix
        return 1/(1+np.exp(-z))
    
    def sigmoidPrime(self,z):
        #Gradient of sigmoid
        return np.exp(-z)/((1+np.exp(-z))**2)
    
    def forward(self, X):
        #Propogate inputs though network
        
        self.z2 = np.dot(X, self.W1) + self.B1

        self.a2 = self.sigmoid(self.z2)
        
        self.z3 = np.dot(self.a2, self.W2) + self.B2

        return self.sigmoid(self.z3)
        
    def cost(self, X, y):
        #Compute cost for given X,y, use weights already stored in class.
        self.yHat = self.forward(X)
        J = 0.5*sum((y-self.yHat)**2)
        return J
        
    def backward(self, X, y):
        #Compute derivative with respect to W and W2 for a given X and y:

        self.yHat = self.forward(X)
        
        delta3 = np.multiply(-(y-self.yHat), self.sigmoidPrime(self.z3))
        
        dJB2 = np.array([np.expand_dims(np.sum(delta3), axis = 0)])
        
        dJdW2 = np.dot(self.a2.T, delta3)
        
        delta2 = np.dot(delta3, self.W2.T)*self.sigmoidPrime(self.z2)

        dJB1 = np.array([np.sum(delta2, axis = 1)])

        dJdW1 = np.dot(X.T, delta2)  

        return dJdW1, dJdW2, dJB1, dJB2
